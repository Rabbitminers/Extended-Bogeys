plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.loom.accessWidenerPath

    runs {
        datagen {
            client()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // mavens for Fabric-exclusives
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.module.name == "fabric-loader") {
            useVersion(fabric_loader_version)
        }
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version as String,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version,
            "create_version", create_fabric_version // on fabric, use the entire version, unlike forge
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def hasUnstaged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    def result = stdout.toString().replaceAll("M gradlew", "").trim()
    if (!result.isEmpty())
        println("Found stageable results:\n${result}\n")
    return !result.isEmpty()
}


shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"

    String gitHash =  "\"${getGitHash()}" + (hasUnstaged() ? "-modified" : "") + "\""

    manifest {
        attributes([
                "Git-Hash": gitHash
        ])
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    String gitHash =  "\"${getGitHash()}" + (hasUnstaged() ? "-modified" : "") + "\""

    manifest {
        attributes([
                "Git-Hash": gitHash
        ])
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets.main {
    resources { // include generated resources in resources
        srcDir("src/generated/resources")
        exclude("src/generated/resources/.cache")
    }
}

publishMods {
    file = remapJar.archiveFile
    changelog = getChangelogText("Fabric", true)
    type = STABLE

    version = "$mod_version-$minecraft_version-$raw_create_version-fabric"
    displayName = "Extended Bogeys $mod_version Fabric $minecraft_version"

    modLoaders.add("fabric")
    modLoaders.add("quilt")

    curseforge {
        projectId = curseforge_fabric_id
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "create-fabric"
        }
    }

    modrinth {
        projectId = modrinth_fabric_id
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "create-fabric"
        }
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        // TODO: Setup maven
    }
}